static void Planimeter5()
{
    // Check fix for Planimeter pole crossing bug found 2011-06-24
    double points[][] = {{89, 0.1}, {89, 90.1}, {89, -179.9}};
    PolygonResult a = Planimeter(points);
    assertEquals(a.perimeter, 539297, 1);
    assertEquals(a.area, 12476152838.5, 1);
}

 static void Planimeter6()
{
    // Check fix for Planimeter lon12 rounding bug found 2012-12-03
    double pa[][] = {{9, -0.00000000000001}, {9, 180}, {9, 0}};
    PolygonResult a = Planimeter(pa);
    assertEquals(a.perimeter, 36026861, 1);
    assertEquals(a.area, 0, 1);
    double pb[][] = {{9, 0.00000000000001}, {9, 0}, {9, 180}};
    a = Planimeter(pb);
    assertEquals(a.perimeter, 36026861, 1);
    assertEquals(a.area, 0, 1);
    double pc[][] = {{9, 0.00000000000001}, {9, 180}, {9, 0}};
    a = Planimeter(pc);
    assertEquals(a.perimeter, 36026861, 1);
    assertEquals(a.area, 0, 1);
    double pd[][] = {{9, -0.00000000000001}, {9, 0}, {9, 180}};
    a = Planimeter(pd);
    assertEquals(a.perimeter, 36026861, 1);
    assertEquals(a.area, 0, 1);
}

 static void Planimeter12()
{
    // Area of arctic circle (not really -- adjunct to rhumb-area test)
    double points[][] =
        {{66.562222222, 0}, {66.562222222, 180}, {66.562222222, 360}};
    PolygonResult a = Planimeter(points);
    assertEquals(a.perimeter, 10465729, 1);
    assertEquals(a.area, 0, 1);
}

 static void Planimeter12r()
{
    // Reverse area of arctic circle
    double points[][] =
        {{66.562222222, -0}, {66.562222222, -180}, {66.562222222, -360}};
    PolygonResult a = Planimeter(points);
    assertEquals(a.perimeter, 10465729, 1);
    assertEquals(a.area, 0, 1);
}

 static void Planimeter13()
{
    // Check encircling pole twice
    double points[][] = {{89, -360}, {89, -240}, {89, -120}, {89, 0}, {89, 120}, {89, 240}};
    PolygonResult a = Planimeter(points);
    assertEquals(a.perimeter, 1160741, 1);
    assertEquals(a.area, 32415230256.0, 1);
}

 static void Planimeter15()
{
    // Coverage tests, includes Planimeter15 - Planimeter18 (combinations of
    // reverse and sign) + calls to testpoint, testedge.
    PolygonResult a;
    double lat[] = {2, 1, 3}, lon[] = {1, 2, 3};
    double r = 18454562325.45119,
           a0 = 510065621724088.5093; // ellipsoid area
    polygon.Clear();
    polygon.AddPoint(lat[0], lon[0]);
    polygon.AddPoint(lat[1], lon[1]);
    a = polygon.TestPoint(lat[2], lon[2], false, true);
    assertEquals(a.area, r, 0.5);
    a = polygon.TestPoint(lat[2], lon[2], false, false);
    assertEquals(a.area, r, 0.5);
    a = polygon.TestPoint(lat[2], lon[2], true, true);
    assertEquals(a.area, -r, 0.5);
    a = polygon.TestPoint(lat[2], lon[2], true, false);
    assertEquals(a.area, a0 - r, 0.5);
    GeodesicData inv = Geodesic.WGS84.Inverse(lat[1], lon[1], lat[2], lon[2]);
    a = polygon.TestEdge(inv.azi1, inv.s12, false, true);
    assertEquals(a.area, r, 0.5);
    a = polygon.TestEdge(inv.azi1, inv.s12, false, false);
    assertEquals(a.area, r, 0.5);
    a = polygon.TestEdge(inv.azi1, inv.s12, true, true);
    assertEquals(a.area, -r, 0.5);
    a = polygon.TestEdge(inv.azi1, inv.s12, true, false);
    assertEquals(a.area, a0 - r, 0.5);
    polygon.AddPoint(lat[2], lon[2]);
    a = polygon.Compute(false, true);
    assertEquals(a.area, r, 0.5);
    a = polygon.Compute(false, false);
    assertEquals(a.area, r, 0.5);
    a = polygon.Compute(true, true);
    assertEquals(a.area, -r, 0.5);
    a = polygon.Compute(true, false);
    assertEquals(a.area, a0 - r, 0.5);
}

 static void Planimeter19()
{
    // Coverage tests, includes Planimeter19 - Planimeter20 (degenerate
    // polygons) + extra cases.
    PolygonResult a;
    polygon.Clear();
    a = polygon.Compute(false, true);
    assertTrue(a.area == 0);
    assertTrue(a.perimeter == 0);
    a = polygon.TestPoint(1, 1, false, true);
    assertTrue(a.area == 0);
    assertTrue(a.perimeter == 0);
    a = polygon.TestEdge(90, 1000, false, true);
    assertTrue(std::isnan(a.area));
    assertTrue(std::isnan(a.perimeter));
    polygon.AddPoint(1, 1);
    a = polygon.Compute(false, true);
    assertTrue(a.area == 0);
    assertTrue(a.perimeter == 0);
    polyline.Clear();
    a = polyline.Compute(false, true);
    assertTrue(a.perimeter == 0);
    a = polyline.TestPoint(1, 1, false, true);
    assertTrue(a.perimeter == 0);
    a = polyline.TestEdge(90, 1000, false, true);
    assertTrue(std::isnan(a.perimeter));
    polyline.AddPoint(1, 1);
    a = polyline.Compute(false, true);
    assertTrue(a.perimeter == 0);
    polygon.AddPoint(1, 1);
    a = polyline.TestEdge(90, 1000, false, true);
    assertEquals(a.perimeter, 1000, 1e-10);
    a = polyline.TestPoint(2, 2, false, true);
    assertEquals(a.perimeter, 156876.149, 0.5e-3);
}

 static void Planimeter21()
{
    // Some tests to add code coverage: multiple circlings of pole (includes
    // Planimeter21 - Planimeter28) + invocations via testpoint and testedge.
    PolygonResult a;
    double lat = 45,
           azi = 39.2144607176828184218, s = 8420705.40957178156285,
           r = 39433884866571.4277, // Area for one circuit
        a0 = 510065621724088.5093;  // Ellipsoid area
    int i;
    polygon.Clear();
    polygon.AddPoint(lat, 60);
    polygon.AddPoint(lat, 180);
    polygon.AddPoint(lat, -60);
    polygon.AddPoint(lat, 60);
    polygon.AddPoint(lat, 180);
    polygon.AddPoint(lat, -60);
    for (i = 3; i <= 4; ++i)
    {
        polygon.AddPoint(lat, 60);
        polygon.AddPoint(lat, 180);
        a = polygon.TestPoint(lat, -60, false, true);
        assertEquals(a.area, i * r, 0.5);
        a = polygon.TestPoint(lat, -60, false, false);
        assertEquals(a.area, i * r, 0.5);
        a = polygon.TestPoint(lat, -60, true, true);
        assertEquals(a.area, -i * r, 0.5);
        a = polygon.TestPoint(lat, -60, true, false);
        assertEquals(a.area, -i * r + a0, 0.5);
        a = polygon.TestEdge(azi, s, false, true);
        assertEquals(a.area, i * r, 0.5);
        a = polygon.TestEdge(azi, s, false, false);
        assertEquals(a.area, i * r, 0.5);
        a = polygon.TestEdge(azi, s, true, true);
        assertEquals(a.area, -i * r, 0.5);
        a = polygon.TestEdge(azi, s, true, false);
        assertEquals(a.area, -i * r + a0, 0.5);
        polygon.AddPoint(lat, -60);
        a = polygon.Compute(false, true);
        assertEquals(a.area, i * r, 0.5);
        a = polygon.Compute(false, false);
        assertEquals(a.area, i * r, 0.5);
        a = polygon.Compute(true, true);
        assertEquals(a.area, -i * r, 0.5);
        a = polygon.Compute(true, false);
        assertEquals(a.area, -i * r + a0, 0.5);
    }
}

 static void Planimeter29()
{
    // Check fix to transitdirect vs transit zero handling inconsistency
    PolygonResult a;
    polygon.Clear();
    polygon.AddPoint(0, 0);
    polygon.AddEdge(90, 1000);
    polygon.AddEdge(0, 1000);
    polygon.AddEdge(-90, 1000);
    a = polygon.Compute(false, true);
    // The area should be 1e6.  Prior to the fix it was 1e6 - A/2, where
    // A = ellipsoid area.
    assertEquals(a.area, 1000000.0, 0.01);
}



Geodesic::GeodesicUtil::inverseReturn Geodesic::GeodesicUtil::inverseHaversine(double lon1, double lat1, double alt1, double lon2, double lat2, double alt2)
{
    const double semi_major_axis = Geodesic::geodParameters.semi_major_axis;

    double const phi1 = Geodesic::Units::toRad(lat1);
    double const phi2 = Geodesic::Units::toRad(lat2);
    double const deltaPhi = Geodesic::Units::toRad(lat2 - lat1);
    double const deltaLambda = Geodesic::Units::toRad(lon2 - lon1);

    double const a = pow(sin(deltaPhi / 2), 2.0) + cos(phi1) * cos(phi2) * pow(sin(deltaLambda / 2), 2.0);
    double const c = 2 * atan2(sqrt(a), sqrt(1 - a));
    double const horizontalDistance = semi_major_axis * c;

    double const distance = sqrt(pow(horizontalDistance, 2.0) + pow(abs(alt2 - alt1), 2.0));

    double y = sin(deltaLambda) * cos(phi2);
    double x = cos(phi1) * sin(phi2) - sin(phi1) * cos(phi2) * cos(deltaLambda);

    double const azi1 = fmod((Geodesic::Units::toDeg(atan2(y, x)) + 360.0), 360.0);
    y = sin(-deltaLambda) * cos(phi1);
    x = cos(phi2) * sin(phi1) - sin(phi2) * cos(phi1) * cos(-deltaLambda);

    double const azi2 = fmod((Geodesic::Units::toDeg(atan2(y, x)) + 360.0), 360.0);

    return {distance, azi1, azi2};
}
Geodesic::GeodesicUtil::directReturn Geodesic::GeodesicUtil::directHaversine(double lon1, double lat1, double alt1, double initialBearing, double distance)
{
    lat1 = Geodesic::Units::toRad(lat1);
    lon1 = Geodesic::Units::toRad(lon1);
    initialBearing = Geodesic::Units::toRad(initialBearing);
    double lat2, lon2, alt2;

    double R_with_alt = Geodesic::geodParameters.semi_major_axis + alt1 / 1000.0;

    // Angular distance covered on earth's surface
    double angularDistance = distance / R_with_alt;

    // Calculate the destination point's latitude
    lat2 = std::asin(std::sin(lat1) * std::cos(angularDistance) +
                     std::cos(lat1) * std::sin(angularDistance) * std::cos(initialBearing));

    // Calculate the destination point's longitude
    lon2 = lon1 + std::atan2(std::sin(initialBearing) * std::sin(angularDistance) * std::cos(lat1),
                             std::cos(angularDistance) - std::sin(lat1) * std::sin(lat2));

    // Assuming no change in altitude for simplicity
    alt2 = alt1;

    // Convert the destination point's latitude and longitude from radians to degrees
    lat2 = Geodesic::Units::toDeg(lat2);
    lon2 = Geodesic::Units::toDeg(lon2);

    return {lon2, lat2, alt2};
}

Geodesic::GeodesicUtil::inverseReturn Geodesic::GeodesicUtil::inverseVincenty(double lon1, double lat1, double alt1, double lon2, double lat2, double alt2)
{
    const double a = Geodesic::geodParameters.semi_major_axis;
    const double b = Geodesic::geodParameters.semi_minor_axis;
    const double f = Geodesic::geodParameters.flattening;

    const int maxIterCount = 100;

    lat1 = Geodesic::Units::toRad(lat1);
    lat2 = Geodesic::Units::toRad(lat2);
    lon1 = Geodesic::Units::toRad(lon1);
    lon2 = Geodesic::Units::toRad(lon2);

    const double tan_U1 = (1 - f) * std::tan(lat1);
    const double tan_U2 = (1 - f) * std::tan(lat2);

    // Longitudinal Distance
    const double cos_U1 = 1 / std::sqrt(1 + tan_U1 * tan_U1);
    const double cos_U2 = 1 / std::sqrt(1 + tan_U2 * tan_U2);
    const double sin_U1 = tan_U1 * cos_U1;
    const double sin_U2 = tan_U2 * cos_U2;

    // Iterate until complete
    const double L = lon2 - lon1;
    double lambda = L;
    double diff, sigma;
    double cos_alpha_sq, cos_2sigma_m;
    double cos_sigma, sin_sigma;

    for (int i = 0; i < maxIterCount; i++)
    {
        double sin_lambda = std::sin(lambda);
        double cos_lambda = std::cos(lambda);

        double c1 = (cos_U2 * sin_lambda) * (cos_U2 * sin_lambda);
        double c2 = (cos_U1 * sin_U2);
        double c3 = (sin_U1 * cos_U2 * cos_lambda);

        sin_sigma = std::sqrt(c1 + (c2 - c3) * (c2 - c3));
        cos_sigma = sin_U1 * sin_U2 + cos_U1 * cos_U2 * cos_lambda;
        sigma = std::atan2(sin_sigma, cos_sigma);
        double sin_alpha = (cos_U1 * cos_U2 * sin_lambda) / (sin_sigma);
        cos_alpha_sq = 1 - (sin_alpha * sin_alpha);
        cos_2sigma_m = cos_sigma - (2 * sin_U1 * sin_U2) / (cos_alpha_sq);

        double C = (f / 16.0) * cos_alpha_sq * (4 + f * (4 - 3 * cos_alpha_sq));

        diff = lambda;
        lambda = L + (1 - C) * f * sin_alpha * (sigma + C * sin_sigma * (cos_2sigma_m + C * cos_sigma * (-1 + 2 * cos_2sigma_m * cos_2sigma_m)));
        diff = lambda - diff;
        if (std::abs(diff) < 1e-12)
        {
            break;
        }
    }
    double u_sq = cos_alpha_sq * (a * a - b * b) / (b * b);
    double A = 1 + (u_sq / 16384) * (4096 + u_sq * (-768 + u_sq * (320 - 175 * u_sq)));
    double B = (u_sq / 1024) * (256 + u_sq * (-128 + u_sq * (-128 + u_sq * (74 - 47 * u_sq))));

    double cos_2sigma_m_sq = cos_2sigma_m * cos_2sigma_m;
    double delta_sigma = B * sin_sigma * (cos_2sigma_m + (B / 4.0) * (cos_sigma * (-1 * 2 * cos_2sigma_m_sq) - (B / 6.0) * cos_2sigma_m * (-3 + 4 * sin_sigma * sin_sigma) * (-3 + 4 * cos_2sigma_m_sq)));

    double horizontal_distance = b * A * (sigma - delta_sigma);

    const double azi1 = atan2((cos_U2 * sin(lambda)), (cos_U1 * sin_U2 - sin_U1 * cos_U2 * cos(lambda)));
    const double azi2 = atan2((cos_U1 * sin(lambda)), (-sin_U1 * cos_U2 + cos_U1 * sin_U2 * cos(lambda)));

    const double verticalDistance = abs(alt2 - alt1);
    const double distance = sqrt(pow(verticalDistance, 2.0) + pow(horizontal_distance, 2.0));
    return {distance, Geodesic::Units::toDeg(azi1), Geodesic::Units::toDeg(azi2)};
}
Geodesic::GeodesicUtil::directReturn Geodesic::GeodesicUtil::directVincenty(double lon1, double lat1, double alt1, double initialBearing, double distance)
{
    double const a = Geodesic::geodParameters.semi_major_axis;
    double const b = Geodesic::geodParameters.semi_minor_axis;
    double const f = Geodesic::geodParameters.flattening;

    lon1 = Geodesic::Units::toRad(lon1);
    lat1 = Geodesic::Units::toRad(lat1);
    double alpha1 = Geodesic::Units::toRad(initialBearing);
    double s = distance;

    double tolerance = 1e-12; // tolerance for convergence

    // Initial values
    double phi1 = lat1;
    double L = lon1;
    double alpha = alpha1;
    double sin_alpha = sin(alpha);
    double cos_alpha = cos(alpha);

    // Iterate until tolerance is met
    for (int i = 0; i < 100; ++i)
    { // max 100 iterations for convergence
        double cos_phi1 = cos(phi1);
        double sin_phi1 = sin(phi1);

        double sigma1 = atan2(b * sin_alpha * cos_phi1,
                              a * cos_phi1); // azimuth at start point
        double cos_sigma1 = cos(sigma1);
        double sin_sigma1 = sin(sigma1);

        double cos_alpha_sq = cos_alpha * cos_alpha;
        double u_sq = cos_alpha_sq * (a * a - b * b) / (b * b);

        double A = 1 + u_sq / 16384 * (4096 + u_sq * (-768 + u_sq * (320 - 175 * u_sq)));
        double B = u_sq / 1024 * (256 + u_sq * (-128 + u_sq * (74 - 47 * u_sq)));

        double sigma = s / (b * A);
        double sigma_p = 2 * sigma1 + sigma;

        double delta_sigma = B * sin_sigma1 * (cos(sigma_p) + B / 4 * (cos_sigma1 * (-1 + 2 * cos(sigma_p) * cos(sigma_p)) - B / 6 * cos(sigma_p) * (-3 + 4 * sin_sigma1 * sin_sigma1) * (-3 + 4 * cos(sigma_p) * cos(sigma_p))));

        double phi2 = atan2(sin_phi1 * cos(sigma) + cos_phi1 * sin(sigma) * cos_alpha,
                            (1 - f) * sqrt(sin_alpha * sin_alpha + (sin_phi1 * sin(sigma) - cos_phi1 * cos(sigma) * cos_alpha) * (sin_phi1 * sin(sigma) - cos_phi1 * cos(sigma) * cos_alpha)));

        double lambda_ = atan2(sin(sigma) * sin_alpha,
                               cos_phi1 * cos(sigma) - sin_phi1 * sin(sigma) * cos_alpha);

        double C = f / 16 * cos_alpha_sq * (4 + f * (4 - 3 * cos_alpha_sq));
        double lambda_p = lambda_ - (1 - C) * f * sin_alpha * (sigma + C * sin(sigma) * (cos(sigma_p) + C * cos_sigma1 * (-1 + 2 * cos(sigma_p) * cos(sigma_p))));

        double convergence = abs(sigma - delta_sigma) / sigma;

        if (convergence < tolerance)
        {
            break;
        }

        phi1 = phi2;
        L = lon1 + lambda_p;
    }

    // Final latitude and longitude in radians
    double lat2 = phi1;
    double lon2 = L;

    // Convert back to degrees
    double const destinationLongitude = Geodesic::Units::toDeg(lon2);
    double const destinationLatitude = Geodesic::Units::toDeg(lat2);
    double const destinationAltitude = alt1; // altitude remains unchanged

    return {destinationLongitude, destinationLatitude, destinationAltitude};
}

Geodesic::GeodesicData Geodesic::GeodesicUtil::properInverse(double lon1, double lat1, double alt1, double lon2, double lat2, double alt2, int outmask)
{
    Geodesic::GeodesicData data = Geodesic::kObj.Inverse(lat1, lon1, lat2, lon2, outmask);
    
    return data;
}
Geodesic::GeodesicData Geodesic::GeodesicUtil::properDirect(double lon1, double lat1, double alt1, double initialBearing, double distance, int outmask)
{

    Geodesic::GeodesicData data = Geodesic::kObj.Direct(lon1, lat1, initialBearing, distance, outmask);
    return data;
}
